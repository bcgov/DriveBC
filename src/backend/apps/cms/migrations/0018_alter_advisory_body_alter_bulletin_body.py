# Generated by Django 4.2.11 on 2024-08-29 17:17
import json

from django.contrib.contenttypes.models import ContentType
from django.core.serializers.json import DjangoJSONEncoder
from django.db import migrations
import wagtail.blocks
import wagtail.fields


def page_to_streamfield(page):
    changed = False
    try:
        json.loads(page.body)
    except ValueError:
        page.body = json.dumps(
            [{"type": "rich_text", "value": page.body}],
        )
        changed = True
    else:
        # It's already valid JSON. Leave it.
        pass

    return page, changed


def pagerevision_to_streamfield(revision_data):
    changed = False
    body = revision_data.get("body")
    if body:
        try:
            json.loads(body)
        except ValueError:
            revision_data["body"] = json.dumps(
                [{
                    "value": body,
                    "type": "rich_text"
                }],
                cls=DjangoJSONEncoder)
            changed = True
        else:
            # It's already valid JSON. Leave it.
            pass
    return revision_data, changed


def page_to_richtext(page):
    changed = False
    if page.body:
        try:
            body_data = json.loads(page.body)
        except ValueError:
            # It's not apparently a StreamField. Leave it.
            pass
        else:
            page.body = "".join([
                child["value"] for child in body_data
                if child["type"] == "rich_text"
            ])
            changed = True

    return page, changed


def pagerevision_to_richtext(revision_data):
    changed = False
    body = revision_data.get("body", "definitely non-JSON string")
    if body:
        try:
            body_data = json.loads(body)
        except ValueError:
            # It's not apparently a StreamField. Leave it.
            pass
        else:
            raw_text = "".join([
                child["value"] for child in body_data
                if child["type"] == "rich_text"
            ])
            revision_data["body"] = raw_text
            changed = True
    return revision_data, changed


def convert(apps, model_name, page_converter, pagerevision_converter):
    BlogPage = apps.get_model("cms", model_name)
    content_type = ContentType.objects.get_for_model(BlogPage)
    Revision = apps.get_model("wagtailcore", "Revision")

    for page in BlogPage.objects.all():

        page, changed = page_converter(page)
        if changed:
            page.save()

        for revision in Revision.objects.filter(
            content_type_id=content_type.pk, object_id=page.pk
        ):
            revision_data = revision.content
            revision_data, changed = pagerevision_converter(revision_data)
            if changed:
                revision.content = revision_data
                revision.save()


def convert_to_streamfield(apps, schema_editor):
    convert(apps, "Advisory", page_to_streamfield, pagerevision_to_streamfield)
    return convert(apps, "Bulletin", page_to_streamfield, pagerevision_to_streamfield)


def convert_to_richtext(apps, schema_editor):
    convert(apps, "Advisory", page_to_streamfield, pagerevision_to_streamfield)
    return convert(apps, "Bulletin", page_to_streamfield, pagerevision_to_streamfield)


class Migration(migrations.Migration):

    dependencies = [
        ('cms', '0017_alter_advisory_geometry'),
    ]

    operations = [
        migrations.RunPython(
            convert_to_streamfield,
            convert_to_richtext,
        ),
        migrations.AlterField(
            model_name='advisory',
            name='body',
            field=wagtail.fields.StreamField([('subheading', 0), ('rich_text', 1), ('table', 2), ('callout', 3)], block_lookup={0: ('wagtail.blocks.CharBlock', (), {'template': 'cms/subheading.html'}), 1: ('wagtail.blocks.RichTextBlock', (), {}), 2: ('wagtail.contrib.table_block.blocks.TableBlock', (), {'table_options': {'colHeaders': True, 'rowHeaders': True}}), 3: ('wagtail.blocks.RichTextBlock', (), {'help_text': "\nThis block is for information that needs to be presented as especially important,\nstyled according to the BC gov't's style guide (light grey background, blue\nborder on the left).\n", 'template': 'cms/callout.html'})}),
        ),
        migrations.AlterField(
            model_name='bulletin',
            name='body',
            field=wagtail.fields.StreamField([('subheading', 0), ('rich_text', 1), ('table', 2), ('callout', 3)], block_lookup={0: ('wagtail.blocks.CharBlock', (), {'template': 'cms/subheading.html'}), 1: ('wagtail.blocks.RichTextBlock', (), {}), 2: ('wagtail.contrib.table_block.blocks.TableBlock', (), {'table_options': {'colHeaders': True, 'rowHeaders': True}}), 3: ('wagtail.blocks.RichTextBlock', (), {'help_text': "\nThis block is for information that needs to be presented as especially important,\nstyled according to the BC gov't's style guide (light grey background, blue\nborder on the left).\n", 'template': 'cms/callout.html'})}),
        ),
    ]
